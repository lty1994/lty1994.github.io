<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heitu的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liutaiyu.cn/"/>
  <updated>2018-11-06T01:40:55.526Z</updated>
  <id>http://liutaiyu.cn/</id>
  
  <author>
    <name>Heitu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于博客</title>
    <link href="http://liutaiyu.cn/2018/11/06/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liutaiyu.cn/2018/11/06/关于博客/</id>
    <published>2018-11-06T01:30:54.000Z</published>
    <updated>2018-11-06T01:40:55.526Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了三天的博客，今天总算是告一段落了。搭建个人博客的目的其实很简单，就是为了记录自己学习的点点滴滴。当然过程中也对域名使用、git版本控制、markdown编辑也有了更深的理解和实践。目前的博客就是这样了，非常简单的使用hexo，之后有时间再来美化了。庆祝一下Heitu的博客正式开通！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;折腾了三天的博客，今天总算是告一段落了。搭建个人博客的目的其实很简单，就是为了记录自己学习的点点滴滴。当然过程中也对域名使用、git版本控制、markdown编辑也有了更深的理解和实践。目前的博客就是这样了，非常简单的使用hexo，之后有时间再来美化了。庆祝一下Heitu的
      
    
    </summary>
    
      <category term="随笔" scheme="http://liutaiyu.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日记" scheme="http://liutaiyu.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>148.排序链表</title>
    <link href="http://liutaiyu.cn/2018/11/05/148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://liutaiyu.cn/2018/11/05/148-排序链表/</id>
    <published>2018-11-05T09:03:36.000Z</published>
    <updated>2018-11-05T10:53:02.974Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://leetcode-cn.com/problems/sort-list/description/" target="_blank" rel="noopener">148. 排序链表</a><br><strong>在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</strong><br><strong>示例1:</strong></p><blockquote><p>输入: 4-&gt;2-&gt;1-&gt;3<br>  输出: 1-&gt;2-&gt;3-&gt;4</p></blockquote><p><strong>示例2:</strong></p><blockquote><p>输入: -1-&gt;5-&gt;3-&gt;4-&gt;0<br>  输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</p></blockquote><p>思路：考查链表的排序，要求的时间复杂度可以联想到快速排序、堆排序、归并排序。由于是链表，我们选择二分归并排序比较容易实现。以下是Java的两种实现。</p><p>解法一：常规的插入排序，用时较多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode root=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        root.next=head;</span><br><span class="line">        ListNode p=head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>&amp;&amp;p.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val&lt;=p.next.val)&#123;p=p.next;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ListNode tmp=root,q=p.next;</span><br><span class="line">                <span class="keyword">while</span>(tmp.next.val&lt;=q.val)&#123;</span><br><span class="line">                    tmp=tmp.next;</span><br><span class="line">                &#125;                </span><br><span class="line">                p.next=q.next;</span><br><span class="line">                q.next=tmp.next;</span><br><span class="line">                tmp.next=q;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.next;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解法二：二分归并排序,用时较少<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ListNode <span class="title">mergeSort</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"><span class="comment">//分治</span></span><br><span class="line">ListNode p1 = head;</span><br><span class="line">ListNode p2 = head;</span><br><span class="line"><span class="comment">//遍历对链表二分</span></span><br><span class="line"><span class="keyword">while</span>(p2.next!=<span class="keyword">null</span> &amp;&amp; p2.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">p1 = p1.next;</span><br><span class="line">p2 = p2.next.next;</span><br><span class="line">&#125;</span><br><span class="line">ListNode left = head; <span class="comment">//左子链</span></span><br><span class="line">ListNode right = p1.next; <span class="comment">//右子链</span></span><br><span class="line">p1.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//排序子链表</span></span><br><span class="line">left = mergeSort(left);</span><br><span class="line">right = mergeSort(right);</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span>) <span class="keyword">return</span> right;</span><br><span class="line"><span class="keyword">if</span>(right==<span class="keyword">null</span>) <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">ListNode h = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">ListNode p = h;</span><br><span class="line"><span class="comment">//对左右两数进行比较</span></span><br><span class="line"><span class="keyword">while</span>(left!=<span class="keyword">null</span> &amp;&amp; right!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(left.val&lt;right.val)&#123;</span><br><span class="line">p.next = left;</span><br><span class="line">left = left.next;</span><br><span class="line">p = p.next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">p.next = right;</span><br><span class="line">right = right.next;</span><br><span class="line">p = p.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span>) p.next = right;</span><br><span class="line"><span class="keyword">else</span> p.next = left;</span><br><span class="line"><span class="keyword">return</span> h.next; <span class="comment">//返回表头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode-cn.com/problems/sort-list/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;148. 排序链表&lt;/a&gt;&lt;br&gt;&lt;strong&gt;在 O(n log 
      
    
    </summary>
    
      <category term="算法" scheme="http://liutaiyu.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://liutaiyu.cn/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="Leetcode" scheme="http://liutaiyu.cn/tags/Leetcode/"/>
    
  </entry>
  
</feed>
